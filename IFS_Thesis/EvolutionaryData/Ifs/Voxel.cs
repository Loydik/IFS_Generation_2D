using System;
using System.Windows.Media.Media3D;

namespace IFS_Thesis.EvolutionaryData.Ifs
{
    /// <summary>
    /// Voxel (Pixel in 3 dimensions)
    /// </summary>
    public class Voxel : IEquatable<Voxel>
    {
        public Voxel(int x, int y, int z)
        {
            X = x;
            Y = y;
            Z = z;
        }

        public int X { get; set; }
        public int Y { get; set; }
        public int Z { get; set; }

        public static implicit operator Voxel(Point3D point)
        {
            return new Voxel(Convert.ToInt32(point.X), Convert.ToInt32(point.Y), Convert.ToInt32(point.Z));
        }

        public static implicit operator Point3D(Voxel point)
        {
            return new Point3D(point.X, point.Y, point.Z);
        }

        #region Overriding Equals Operator (Auto-generated by Resharper)

        public bool Equals(Voxel other)
        {
            if (ReferenceEquals(null, other)) return false;
            if (ReferenceEquals(this, other)) return true;
            return X == other.X && Y == other.Y && Z == other.Z;
        }

        public override bool Equals(object obj)
        {
            if (ReferenceEquals(null, obj)) return false;
            if (ReferenceEquals(this, obj)) return true;
            if (obj.GetType() != GetType()) return false;
            return Equals((Voxel) obj);
        }

        public override int GetHashCode()
        {
            unchecked
            {
                var hashCode = X;
                hashCode = (hashCode * 397) ^ Y;
                hashCode = (hashCode * 397) ^ Z;
                return hashCode;
            }
        }

        #endregion
    }
}
